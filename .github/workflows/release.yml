name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libnvidia-ml-dev

      - name: Build amgctl binary
        working-directory: tools/amgctl
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
        run: |
          BINARY_NAME="amgctl-${{ matrix.goos }}-${{ matrix.goarch }}"
          go build -ldflags="-s -w" -o "$BINARY_NAME" .

      - name: Build amg-qad binary
        working-directory: tools/amg-qad
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          BINARY_NAME="amg-qad-${{ matrix.goos }}-${{ matrix.goarch }}"
          VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
          BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
          COMMIT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
          go build -ldflags="-s -w -X 'github.com/weka/amg-utils/tools/amg-qad/cmd.version=$VERSION' -X 'main.buildTime=$BUILD_TIME' -X 'main.commit=$COMMIT'" -o "$BINARY_NAME" .
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            tools/amgctl/amgctl-${{ matrix.goos }}-${{ matrix.goarch }}
            tools/amg-qad/amg-qad-${{ matrix.goos }}-${{ matrix.goarch }}

  release:
    name: Create release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true

      - name: Prepare release assets
        run: |
          mkdir -p ./binaries
          echo "Downloaded artifacts structure:"
          find ./artifacts -type f | sort
          
          # Copy all binary files to a flat structure
          find ./artifacts -type f -name "*amg*" -exec cp {} ./binaries/ \;
          
          echo "Prepared binaries for release:"
          ls -la ./binaries/
          
      - name: Generate checksums
        run: |
          cd binaries
          echo "Generating checksums for:"
          ls -la
          
          # Generate checksums for all files
          sha256sum * > checksums.txt
          
          echo "Generated checksums:"
          cat checksums.txt
          
      - name: Get tag name
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          # Get the current tag
          CURRENT_TAG="${GITHUB_REF#refs/tags/}"
          
          # Get the previous tag
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "$CURRENT_TAG" | head -n 1)
          
          echo "Current tag: $CURRENT_TAG"
          echo "Previous tag: $PREVIOUS_TAG"
          
          # Create release notes header
          cat > release_notes.md << EOF
          ## Changes in $CURRENT_TAG
          
          ### Release Notes
          
          EOF
          
          # Add commits directly to file (avoid variable expansion issues)
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "This appears to be the first release"
            git log --oneline --pretty=format:"- %s" | head -20 >> release_notes.md
          else
            echo "Getting commits between $PREVIOUS_TAG and $CURRENT_TAG"
            git log --oneline --pretty=format:"- %s" "${PREVIOUS_TAG}..${CURRENT_TAG}" >> release_notes.md
          fi
          
          # Add installation instructions
          cat >> release_notes.md << EOF
          
          ### Installation
          
          Download the binaries for your Linux platform:
          
          **amgctl (AMG Control CLI):**
          - **Linux (x64)**: \`amgctl-linux-amd64\`
          
          **amg-qad (AMG Quality Assurance Daemon):**
          - **Linux (x64)**: \`amg-qad-linux-amd64\`
          
          ### Self-Update
          
          If you already have amgctl installed, you can update to this version by running:
          
          \`\`\`bash
          amgctl update
          \`\`\`
          
          ### Usage
          
          **amgctl** - Main CLI tool for AMG environment management:
          \`\`\`bash
          ./amgctl-linux-amd64 --help
          \`\`\`
          
          **amg-qad** - Quality Assurance Daemon:
          \`\`\`bash
          # Start the daemon
          ./amg-qad-linux-amd64 daemon
          
          # View dashboard at http://localhost:8080
          \`\`\`
          
          ### Verification
          
          All binaries include SHA256 checksums in \`checksums.txt\` for verification.
          EOF
          
          # Debug: show what we generated
          echo "=== Generated release notes ==="
          cat release_notes.md
          echo "=== End release notes ==="
          
          # Set the release notes as output (escape newlines for GitHub Actions)
          {
            echo "notes<<EOF"
            cat release_notes.md
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.tag.outputs.tag }}
          tag_name: ${{ steps.tag.outputs.tag }}
          body: ${{ steps.release_notes.outputs.notes }}
          files: |
            binaries/amgctl-linux-amd64
            binaries/amg-qad-linux-amd64
            binaries/checksums.txt
          draft: false
          prerelease: false
