{{- if .Values.nvidiaFs.enabled }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "amg-cw-chart.nvidiafs.name" . }}
  labels:
    {{- include "amg-cw-chart.nvidiafs.labels" . | nindent 4 }}
  {{- with .Values.additionalAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels:
      {{- include "amg-cw-chart.nvidiafs.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "amg-cw-chart.nvidiafs.selectorLabels" . | nindent 8 }}
      {{- with .Values.additionalAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      hostNetwork: true
      containers:
        - name: install-nvidiafs
          image: {{ .Values.nvidiaFs.image.repository }}:{{ .Values.nvidiaFs.image.tag }}
          imagePullPolicy: {{ .Values.nvidiaFs.image.pullPolicy }}
          command: ["/bin/bash", "-c"]
          args:
            - |
              bash <<EOF
              set -e  # Exit on any command failure
              
              echo "Starting nvidia_fs installation process..."
              
              chroot /host
              export KERNEL_VERSION={{ .Values.nvidiaFs.kernelVersion }}
              export DEBIAN_FRONTEND=noninteractive
              
              echo "Updating package lists..."
              apt-get update
              
              echo "Installing required packages..."
              apt-get install -y curl wget iputils-ping net-tools dnsutils tcpdump nmap netcat procps lsof vim htop nvme-cli iproute2 kmod hwloc less
              
              echo "Setting up CUDA repository..."
              cd /opt/k8s-weka
              wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
              dpkg -i --force-confnew cuda-keyring_1.1-1_all.deb
              apt-get update
              
              echo "Installing nvidia-gds..."
              apt install -y nvidia-gds={{ .Values.nvidiaFs.nvidiaGdsVersion }}
              
              echo "Loading nvidia_fs module..."
              modprobe nvidia_fs
              
              echo "Verifying nvidia_fs module is loaded..."
              if lsmod | grep -q nvidia_fs; then
                echo "SUCCESS: nvidia_fs module is loaded successfully"
                lsmod | grep nvidia_fs
                echo "nvidia_fs installation completed successfully. Exiting."
                exit 0
              else
                echo "ERROR: nvidia_fs module failed to load properly"
                echo "Available modules:"
                lsmod | head -10
                exit 1
              fi
              EOF
          resources:
            {{- toYaml .Values.nvidiaFs.resources | nindent 12 }}
          securityContext:
            privileged: true
          volumeMounts:
            - name: host-filesystem
              mountPath: /host
            - name: host-dev
              mountPath: /dev
            - name: host-sys
              mountPath: /sys
          {{- with .Values.nvidiaFs.env }}
          env:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        - name: host-filesystem
          hostPath:
            path: /
        - name: host-dev
          hostPath:
            path: /dev
        - name: host-sys
          hostPath:
            path: /sys
      {{- with .Values.nvidiaFs.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nvidiaFs.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
