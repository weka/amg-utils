{{- if .Values.nicClusterPolicy.enabled }}
apiVersion: mellanox.com/v1alpha1
kind: NicClusterPolicy
metadata:
  name: {{ .Values.nicClusterPolicy.name | default "nic-cluster-policy" }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "amg-chart.labels" . | nindent 4 }}
spec:
  # OFED Driver configuration
  ofedDriver:
    repository: {{ .Values.nicClusterPolicy.ofedDriver.repository }}
    image: {{ .Values.nicClusterPolicy.ofedDriver.image }}
    version: {{ .Values.nicClusterPolicy.ofedDriver.version }}
    forcePrecompiled: {{ .Values.nicClusterPolicy.ofedDriver.forcePrecompiled }}
    {{- with .Values.nicClusterPolicy.ofedDriver.imagePullSecrets }}
    imagePullSecrets:
      {{- toYaml . | nindent 6 }}
    {{- end }}
    terminationGracePeriodSeconds: {{ .Values.nicClusterPolicy.ofedDriver.terminationGracePeriodSeconds }}
    startupProbe:
      initialDelaySeconds: {{ .Values.nicClusterPolicy.ofedDriver.startupProbe.initialDelaySeconds }}
      periodSeconds: {{ .Values.nicClusterPolicy.ofedDriver.startupProbe.periodSeconds }}
    livenessProbe:
      initialDelaySeconds: {{ .Values.nicClusterPolicy.ofedDriver.livenessProbe.initialDelaySeconds }}
      periodSeconds: {{ .Values.nicClusterPolicy.ofedDriver.livenessProbe.periodSeconds }}
    readinessProbe:
      initialDelaySeconds: {{ .Values.nicClusterPolicy.ofedDriver.readinessProbe.initialDelaySeconds }}
      periodSeconds: {{ .Values.nicClusterPolicy.ofedDriver.readinessProbe.periodSeconds }}
    upgradePolicy:
      autoUpgrade: {{ .Values.nicClusterPolicy.ofedDriver.upgradePolicy.autoUpgrade }}
      maxParallelUpgrades: {{ .Values.nicClusterPolicy.ofedDriver.upgradePolicy.maxParallelUpgrades }}
      safeLoad: {{ .Values.nicClusterPolicy.ofedDriver.upgradePolicy.safeLoad }}
      drain:
        enable: {{ .Values.nicClusterPolicy.ofedDriver.upgradePolicy.drain.enable }}
        force: {{ .Values.nicClusterPolicy.ofedDriver.upgradePolicy.drain.force }}
        podSelector: {{ .Values.nicClusterPolicy.ofedDriver.upgradePolicy.drain.podSelector | quote }}
        timeoutSeconds: {{ .Values.nicClusterPolicy.ofedDriver.upgradePolicy.drain.timeoutSeconds }}
        deleteEmptyDir: {{ .Values.nicClusterPolicy.ofedDriver.upgradePolicy.drain.deleteEmptyDir }}

  # RDMA Shared Device Plugin
  rdmaSharedDevicePlugin:
    repository: {{ .Values.nicClusterPolicy.rdmaSharedDevicePlugin.repository }}
    image: {{ .Values.nicClusterPolicy.rdmaSharedDevicePlugin.image }}
    version: {{ .Values.nicClusterPolicy.rdmaSharedDevicePlugin.version }}
    {{- with .Values.nicClusterPolicy.rdmaSharedDevicePlugin.imagePullSecrets }}
    imagePullSecrets:
      {{- toYaml . | nindent 6 }}
    {{- end }}
    config: |
      {
        "configList": [
          {
            "resourceName": "{{ .Values.nicClusterPolicy.rdmaSharedDevicePlugin.resourceName }}",
            "rdmaHcaMax": {{ .Values.nicClusterPolicy.rdmaSharedDevicePlugin.rdmaHcaMax }},
            "selectors": {
              "vendors": {{ .Values.nicClusterPolicy.rdmaSharedDevicePlugin.selectors.vendors | toJson }},
              "deviceIDs": {{ .Values.nicClusterPolicy.rdmaSharedDevicePlugin.selectors.deviceIDs | toJson }},
              "drivers": {{ .Values.nicClusterPolicy.rdmaSharedDevicePlugin.selectors.drivers | toJson }},
              "ifNames": {{ .Values.nicClusterPolicy.rdmaSharedDevicePlugin.selectors.ifNames | toJson }},
              "linkTypes": {{ .Values.nicClusterPolicy.rdmaSharedDevicePlugin.selectors.linkTypes | toJson }}
            }
          }
        ]
      }
{{- end }}
